require("dotenv").config();
const express = require("express");
const mongoose = require("mongoose");
const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");
const app = express();
const cors = require("cors");

//ver sobre express-session e -fileupload

//Config JSON response
app.use(express.json());
app.use(cors());

//Models
const User = require("../models/User");


//Open Route
app.get("/", (req, res) => {
  res.status(200).json({ msg: "Conectado ao banco!" });
  console.log("Conectado à rota");
});

//Private Route
app.get("/user/:id", checkToken, async (req, res) => {
  const id = req.params.id;

  const user = await User.findById(id, "-password");
  if (!user) {
    return res.status(404).json({ msg: "Usuário não encontrado!" });
  }

  res.status(200).json({ user });
});

function checkToken(req, res, next) {
  const authHeader = req.headers["authorization"];
  const token = authHeader && authHeader.split(" ")[1];

  if (!token) {
    return res.status(401).json({ msg: "Acesso negado!" });
  }

  try {
    const secret = process.env.SECRET;

    jwt.verify(token, secret);
    res.json({ msg: "Token válido!" });
    next();
  } catch (error) {
    res.status(400).json({ msg: "Token invalido!" });
  }
}

//Register User
app.post("/register", async (req, res) => {
  const { login, name, email, password, confirmPassword } = req.body;

  // Função de validação
  function validateField(field, fieldName) {
    if (!field) {
      throw new Error(`${fieldName} é obrigatório!`);
    }
  }

  try {
    // Validar os campos
    validateField(name, "Nome");
    validateField(email, "Email");
    validateField(password, "Senha");
    validateField(login, "Login");

    if (password !== confirmPassword) {
      throw new Error("As senhas não conferem!");
    }
  } catch (error) {
    return res.status(422).json({ msg: error.message });
  }

  //check if user already exists
  const loginUserExists = await User.findOne({ login: login });

  if (loginUserExists) {
    return res
      .status(422)
      .json({ msg: "Login utilizado por outro usuário! Utilize outro Login" });
  }

  const emailUserExists = await User.findOne({ email: email });

  if (emailUserExists) {
    return res
      .status(422)
      .json({ msg: "Email já está cadastrado por outro usuário!" });
  }

  //create Password
  const salt = bcrypt.genSaltSync(12);
  const passwordHash = bcrypt.hashSync(password, salt);

  //create user
  const user = new User({
    name,
    email,
    password: passwordHash,
    login,
  });

  try {
    await user.save();
    res.status(201).json({ msg: "Usuário criado com sucesso!" });
  } catch (error) {
    console.log(error);
    res.status(500).json({ msg: "Erro no servidor!" });
  }
});

//Login User
app.post("/sign", async (req, res) => {
  const { login, password } = req.body;

  if (!login) return res.status(422).json({ msg: "Login é obrigatório!" });

  if (!password) return res.status(422).json({ msg: "Senha é obrigatória!" })

  try {
    const user = await User.findOne({ login: login });

    if (!user) return res.status(404).json({ msg: "Usuário não encontrado" })

    const checkPassword = await bcrypt.compare(password, user.password);

    if (!checkPassword) return res.status(404).json({ msg: "Usuário não encontrado! Login ou senha incorretos." })

    const secret = process.env.SECRET;
    const token = jwt.sign(
      {
        id: user._id,
      },
      secret
    );

    res.status(200).json({ user, token });
  } catch (error) {
    console.log(error);
    res.status(500).json({ msg: "Erro no servidor!" });
  }
});



//Credentials
const dbUser = process.env.DB_USER;
const dbPassword = process.env.DB_PASS;

mongoose
  .connect(
    `mongodb+srv://${dbUser}:${dbPassword}@libraryreactuser.xfnfufi.mongodb.net/`
  )
  .then(() => {
    app.listen(5000);
    console.log("Conectado ao banco de dados!");
  })
  .catch((err) => {
    console.log("Erro ao conectar com o banco de dados: " + err);
  });
